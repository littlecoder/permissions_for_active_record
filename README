PermissionsForActiveRecord
==========================

This plugin adds a simple permission system to specified ActiveRecords and a helper method to easily blend-in/blend-out certain parts of a view based upon view-permissions on single methods. Methods can be made updateable or locked from being updated. This works also with associated ActiveRecords. It is based on technoweenie's restful-authentication and is inspired by hobo's permission system.

The method "current_user" generated be restful-authentication is passed to the ActiveRecord and can be used to determine if a ActiveRecord can be created, udpated, viewed or destroyed.


Setup
=====

You have to install restful-authentication first.
Add this line after the setup of restful-authentication in ApplicationController:

before_filter :pass_current_user

This line will propagate the current_user as acting_user in all ActiveRecords, where the permission system is activated.


To use the permission system add the following line to an ActiveRecord. This line must be inderted after all association definitions:

add_permissions

Now you can implement the methods
creatable?, updateable?, viewable? and destroyable? in the ActiveRecord. If you return false the active_record cannot be created, updated, viewed or destroyed. Corresponding before_filters are called.


Example
=======

Let's say the ActiveRecord User is used for restful-authentication and stores all user data.
We want Posts only to be updated and destroyed by their owner and to be created only by a logged-in user.
We also want the internal_comment only be viewable by the author.

class Post < ActiveRecord::Base

  belongs_to :owner, :class_name => 'User'

  has_permissions

  def creatable?
    acting_user != :false
  end

  def updateable? field=nil
	acting_user != :false and acting_user.id == owner.id
  end

  def destroyable?
	acting_user != :false and acting_user.id == owner.id
  end

  def viewable? field=nil
	field != :internal_comment or owner.id == acting_user.id
  end

end


To filter the field automatically in the view use the view_for helper:

<% view_for @post |p| -%>
  <h1><%= p.title %></h1>
  <p><%= p.text %></p>
  <% p.internal_comment do |ic| -%>
    <h2>Your Internal Comment</h2>
    <p><%= ic %></p>
  <% end %>
<% end -%>


Tests
=====

The SQLite3-Adapter is required for the tests.


Copyright (c) 2009 [Malte BÃ¼chmann], released under the MIT license
